
name: Continuous integration testing

on:
  push:

jobs:
  
  lint:
    name: Run Linter and Code Style checker
    runs-on: ubuntu-latest
    steps:
        -   name: Checkout the project
            uses: actions/checkout@v2
        -   name: Get PHP version
            shell: bash
            run: php -v
        
        -   name: Install Composer
            shell: bash
            run: >-
                wget https://github.com/composer/getcomposer.org/raw/master/web/installer -O - -q |
                php -- --quiet
        
        -   name: Install PHP packages
            shell: bash
            run: composer install
        -   name: Install Node packages
            shell: bash
            run: npm -q install
        
        -   name: Run PHP linter
            shell: bash
            run: composer lint:lint
        -   name: Run PHP code style checker
            shell: bash
            env:
                PHP_CS_FIXER_IGNORE_ENV: 1
            run: composer cs:check
            
        -   name: Check for formatting issues with vue files (prettier)
            shell: bash
            run: >-
                npm run prettier || {
                echo '::error ::The prettier style checker failed.
                Please run `npm run prettier-fix` in order to correct this.';
                exit 1;
                }

        -   name: Check for issues with vue and js files (eslint)
            shell: bash
            run: >-
                npm run eslint || {
                echo '::error ::The eslint style checker failed.
                Please run `npm run eslint-fix` in order to correct this.';
                exit 1;
                }

        -   name: Check for formatting issues with CSS files (stylelint)
            shell: bash
            run: >-
                npm run stylelint || {
                echo '::error ::The stylelint checker failed.
                Please run `npm run stylelint-fix` to help solving these issues if possible.';
                exit 1;
                }
        
  
  unit-tests:
    name: Run the unittests
    runs-on: ubuntu-latest
    
    continue-on-error: ${{ matrix.mayFail }}
    
    strategy:
        fail-fast: false
        matrix:
            database:
                - mysql
                - pgsql
                - sqlite
            coreVersion:
                - stable21
            phpVersion:
                - "7"
            httpServer:
                - "apache"
            mayFail:
                - false
            include:
                # Test different core versions additionally
                -   database: mysql
                    coreVersion: stable19
                    phpVersion: "7"
                    httpServer: "apache"
                    mayFail: false
                -   database: mysql
                    coreVersion: stable20
                    phpVersion: "7"
                    httpServer: "apache"
                    mayFail: false
                
                # Test different PHP versions additionally
                -   database: mysql
                    coreVersion: stable21
                    phpVersion: "7.3"
                    httpServer: "apache"
                    mayFail: false
                
                # Test different HTTP server
                -   database: mysql
                    coreVersion: stable21
                    phpVersion: "7"
                    httpServer: "nginx"
                    mayFail: false
                
                # Test against master (optionally)
                -   database: mysql
                    coreVersion: master
                    phpVersion: "7"
                    httpServer: "apache"
                    mayFail: true
                    
    steps:
      - name: Checkout the app
        uses: actions/checkout@v2
      
      #- name: Docker Layer Caching
        #uses: satackey/action-docker-layer-caching@v0.0.8
        
      - name: Run the tests in docker container
        uses: ./.github/actions/run-tests
        id: run-tests
        with:
            db: ${{ matrix.database }}
            phpVersion: ${{ matrix.phpVersion }}
            allowFailure: ${{ matrix.mayFail }}
            server: ${{ matrix.httpServer }}
            coreVersion: ${{ matrix.coreVersion }}
    
      - name: Upload the log file
        uses: actions/upload-artifact@v2
        with:
            name: Nextcloud-logs (${{matrix.database}}, ${{matrix.coreVersion}}, ${{matrix.httpServer}}, ${{matrix.phpVersion}})
            path: .github/actions/run-tests/volumes/data/nextcloud.log
      
      - name: Upload the coverage reports to codecov.io
        shell: bash
        run: >-
            bash <(curl -s https://codecov.io/bash)
            -F unittests
            -f .github/actions/run-tests/volumes/coverage/latest/coverage.unit.xml
            -R .
            -X gcov
            &&
            bash <(curl -s https://codecov.io/bash)
            -F integration
            -f .github/actions/run-tests/volumes/coverage/latest/coverage.integration.xml
            -R .
            -X gcov
        if: ${{ steps.run-tests.outputs.silentFail == 'false' }}
      
      - name: Copy coverage-reports into non-link folder
        shell: bash
        run: >-
            mkdir /tmp/coverage &&
            rsync -a .github/actions/run-tests/volumes/coverage/latest/ /tmp/coverage
        if: ${{ steps.run-tests.outputs.silentFail == 'false' }}
        
      - name: Upload the code coverage report (unit tests)
        uses: actions/upload-artifact@v2
        with:
            name: Code coverage (HTML) (${{matrix.database}}, ${{matrix.coreVersion}}, ${{matrix.httpServer}}, ${{matrix.phpVersion}})
            path: "/tmp/coverage"
        if: ${{ steps.run-tests.outputs.silentFail == 'false' }}
      

  source-package:
    name: Create source code artifacts
    needs:
        - unit-tests
        - php-lint
    runs-on: ubuntu-latest
    
    steps:
        -   name: Checkout the app
            uses: actions/checkout@v2
        
        -   name: Install the NPM dependencies
            shell: bash
            run: >-
                npm install
        -   name: Install the dependencies for composer
            shell: bash
            run: >-
                make npm composer_dist
        
        -   name: Create the app store package
            shell: bash
            run: >-
                make appstore_package_name=/tmp/appstore appstore
        -   name: Publish the app store package as artifact
            uses: actions/upload-artifact@v2
            with:
                name: cookbook-appstore
                path: /tmp/appstore.tar.gz
            
